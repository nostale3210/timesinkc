name: build-bootc-image
on:
  pull_request:
  schedule:
    - cron: '00 15 * * *'
  push:
      branches:
        - "main"
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build-and-push:
    name: Build and push image
    runs-on: ubuntu-24.04
    permissions: 
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        major_version:
          - 41
        desktop:
          - silverblue
          - cosmic
        build_target:
          - main
          - nvidia
        include:
          - major_version: 41
            is_latest_version: true
            is_stable_version: true

    steps: 
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Enable sigstore
        shell: bash
        run: |
          sudo mkdir -p /etc/containers/registries.d
          sudo touch /etc/containers/registries.d/"${{ github.repository_owner }}".yaml
          echo "docker:" | sudo tee /etc/containers/registries.d/"${{ github.repository_owner }}".yaml
          echo "  ${{ env.IMAGE_REGISTRY }}:" | sudo tee -a /etc/containers/registries.d/"${{ github.repository_owner }}".yaml
          echo "    use-sigstore-attachments: true" | sudo tee -a /etc/containers/registries.d/"${{ github.repository_owner }}".yaml

      - name: Gather environment variables
        shell: bash
        run: |
          if [[ "${{ matrix.desktop }}" == "silverblue" ]]; then
            echo "SOURCE_ORG=fedora" >> $GITHUB_ENV
            echo "SOURCE_IMAGE=fedora-bootc" >> $GITHUB_ENV

            export IMAGE_FLAVOR="${{ matrix.build_target }}"
            echo "IMAGE_NAME=timesinkc-${IMAGE_FLAVOR}" >> $GITHUB_ENV
          else
            echo "SOURCE_ORG=fedora" >> $GITHUB_ENV
            echo "SOURCE_IMAGE=fedora-bootc" >> $GITHUB_ENV

            export IMAGE_FLAVOR="${{ matrix.build_target }}"
            echo "IMAGE_NAME=timesinkc-${{ matrix.desktop }}-${IMAGE_FLAVOR}" >> $GITHUB_ENV
          fi

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          FVER="${{ matrix.major_version }}"
          SRC="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR_TAG=${SRC}:pr-${{ github.event.number }}" >> $GITHUB_ENV
          else
            echo "VER_TAG=${SRC}:${FVER}" >> $GITHUB_ENV
            echo "DATE_TAG=${SRC}:${FVER}-$(date +%Y%m%d)" >> $GITHUB_ENV
            if [[ "${{ matrix.is_latest_version }}" == "true" ]]; then
              echo "LATEST_TAG=${SRC}:latest" >> $GITHUB_ENV
            fi
            if [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              echo "STABLE_TAG=${SRC}:stable" >> $GITHUB_ENV
            fi
          fi

      - name: Retrieve keys
        run: |
          mkdir -p /tmp/certs || echo "dir exists"
          echo "${{ secrets.AKMOD_PRIVKEY }}" > /tmp/certs/AKMOD_PRIVKEY
          echo "${{ secrets.SIGNING_SECRET }}" > /tmp/certs/SIGNING_SECRET.key

      - name: Build image
        shell: bash
        run: |
          sudo podman build --build-arg=SOURCE_ORG="${{ env.SOURCE_ORG }}" \
            --build-arg=SOURCE_IMAGE="${{ env.SOURCE_IMAGE }}" \
            --build-arg=FEDORA_MAJOR_VERSION="${{ matrix.major_version }}" \
            --build-arg=IMAGE_FLAVOR="${{ matrix.build_target }}" \
            --pull=newer --secret=id=AKMOD_PRIVKEY,src=/tmp/certs/AKMOD_PRIVKEY \
            --target="${{ matrix.desktop }}-${{ matrix.build_target }}" \
            --tag="localhost/timesink" \
            -f ./Containerfile

      - name: Rechunk image
        id: rechunk-image
        uses: hhd-dev/rechunk@v1.1.2
        with:
          ref: localhost/timesink
          prev-ref: "${{ env.VER_TAG }}"
          skip_compression: true
          labels: |
            org.opencontainers.image.title="${{ env.IMAGE_NAME }}"
            org.opencontainers.image.description="${{ env.IMAGE_NAME }}"
            org.opencontainers.image.version="$(date +%Y%m%d)"

      - name: Push image
        shell: bash
        run: |
          IMAGE="$(podman pull "${{ steps.rechunk-image.outputs.ref }}")"
          sudo rm -rf "${{ steps.rechunk-image.outputs.ref }}"

          podman login --username="${{ github.actor }}" --password="${{ secrets.GITHUB_TOKEN }}" ghcr.io

          push_pr() {
            FAILED=()
            podman push "$IMAGE" "${{ env.PR_TAG }}" \
              --compression-format=zstd --tls-verify=true || FAILED+=("PR")
            if [[ "${{ github.event_name }}" == "pull_request" && "${FAILED[*]}" == *"PR"* ]]; then
              echo "PR failed!" && return 1
            else return 0; fi
          }

          push_tag() {
            TAG="$1"
            FAILED=()
            podman push "$IMAGE" "${TAGS[$TAG]}" \
              --compression-format=zstd --tls-verify=true \
              --sign-by-sigstore-private-key=/tmp/certs/SIGNING_SECRET.key || FAILED+=("$TAG")
            if [[ "${FAILED[*]}" == *"VER"* && "${{ github.event_name }}" != "pull_request" ]]; then
              echo "Pushing "${TAGS[$TAG]}" failed!" && return 1
            elif [[ "${FAILED[*]}" == *"DATE"* && "${{ github.event_name }}" != "pull_request" ]]; then
              echo "Pushing "${TAGS[$TAG]}" failed!" && return 1
            elif [[ -n "${{ env.LATEST_TAG }}" && "${FAILED[*]}" == *"LATEST"* ]]; then
              echo "Pushing "${TAGS[$TAG]}" failed!" && return 1
            elif [[ -n "${{ env.STABLE_TAG }}" && "${FAILED[*]}" == *"STABLE"* ]]; then
              echo "Pushing "${TAGS[$TAG]}" failed!" && return 1
            else echo ""${TAGS[$TAG]}" pushed successfully!" && return 0; fi
          }

          declare -A -r TAGS=(
            ["VER"]="${{ env.VER_TAG }}"
            ["DATE"]="${{ env.DATE_TAG }}"
            ["LATEST"]="${{ env.LATEST_TAG }}"
            ["STABLE"]="${{ env.STABLE_TAG }}"
          )
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then push_pr;
          else
            for TAG in "${!TAGS[@]}"; do
              for try in {1..3}; do
                if push_tag "$TAG"; then break; fi
                echo "Try $try out of 3 failed!"
                sleep 15
              done
            done
          fi
