#!/usr/bin/env bash

SOURCE_IMAGE="ghcr.io/nostale3210/timesinkc-cosmic-main:latest"
LOCAL_TAG="localhost/ald-root"
ALD_PATH="/var/deployments"
BOOT_PATH="/boot"
KEEP_DEPS="4"

pprint() {
    printf "\e[1F\e[2K$1\r\e[1E"
}

print_help() {
    printf "AAAAAAAAAHHHHHHHHH\n"
}

fail_ex() {
    printf "\nCritical Failure!\n$2\nAborting!\n"
    pprint "Attempting cleanup..."
    podman rm ald-tmp &>/dev/null
    rm -rf "$ALD_PATH/$1"
    rm -rf "$ALD_PATH/init/$1.sh"
    rm -rf "$BOOT_PATH/$1"
    rm -rf "$BOOT_PATH/loader/entries/$1.conf"
    if ! mountpoint /usr &>/dev/null; then mount -o bind,ro /usr /usr; fi
    exit 1
}

pull_image() {
    pprint "Pulling $SOURCE_IMAGE..."
    if [[ "$tput_support" == "y" ]]; then tput smcup; fi
    podman pull "$SOURCE_IMAGE"
    if [[ "$tput_support" == "y" ]]; then tput rmcup; fi
}

build_image() {
    pprint "Building local image..."
    if [[ "$tput_support" == "y" ]]; then tput smcup; fi
    podman build --build-arg=SOURCE_IMAGE="$SOURCE_IMAGE" -t "$LOCAL_TAG" "$ALD_PATH"
    if [[ "$tput_support" == "y" ]]; then tput rmcup; fi
}

setup_dep() {
    shift
    if [[ "$@" == "-"*"u"* ]]; then pull_image; fi
    if [[ "$@" == "-"*"b"* ]]; then build_image && SOURCE_IMAGE="$LOCAL_TAG"; fi

    pprint "Retrieving vars..."
    current_id="$(cat "$ALD_PATH/current")"
    max_id="$(find "$ALD_PATH" -maxdepth 1 -type d -not -path *init | tail -n+2 | sort | tail -n1 | awk -F'/' '{print $NF}')"
    max_id="$(echo "$current_id" "$max_id" | tr " " "\n" | sort | tail -n1)"
    next_id="$((max_id+1))"

    pprint "Creating directories..."
    mkdir -p "$ALD_PATH/$next_id" || fail_ex "$next_id" "Couldn't create deployment root."
    mkdir -p "$ALD_PATH/init" || fail_ex "$next_id" "Couldn't create init directory."
    mkdir -p "$BOOT_PATH/$next_id" || fail_ex "$next_id" "Couldn't create deployment boot directory."

    pprint "Syncing image root to fs..."
    podman create --name ald-tmp "$SOURCE_IMAGE" &>/dev/null || fail_ex "$next_id" "Couldn't sync files."
    podman cp ald-tmp:/usr "$ALD_PATH/$next_id" || fail_ex "$next_id" "Couldn't sync files."
    podman cp ald-tmp:/etc "$ALD_PATH/$next_id" || fail_ex "$next_id" "Couldn't sync files."
    ln -s "$ALD_PATH/ald" "$ALD_PATH/$next_id/usr/bin/ald"

    pprint "Syncing system configuration..."
    rsync -aclHhx /etc "$ALD_PATH/$next_id" || fail_ex "$next_id" "Couldn't place system config."
    podman cp ald-tmp:/etc/passwd "$ALD_PATH" || fail_ex "$next_id" "Couldn't place system config."
    podman cp ald-tmp:/etc/shadow "$ALD_PATH" || fail_ex "$next_id" "Couldn't place system config."
    podman cp ald-tmp:/etc/passwd- "$ALD_PATH" || fail_ex "$next_id" "Couldn't place system config."
    podman cp ald-tmp:/etc/shadow- "$ALD_PATH" || fail_ex "$next_id" "Couldn't place system config."

    sort /etc/passwd "$ALD_PATH/passwd" | awk -F':' '!a[$1]++' > "$ALD_PATH/$next_id/etc/passwd" || fail_ex "$next_id" "Couldn't place system config."
    sort /etc/shadow "$ALD_PATH/shadow" | awk -F':' '!a[$1]++' > "$ALD_PATH/$next_id/etc/shadow" || fail_ex "$next_id" "Couldn't place system config."
    sort /etc/passwd- "$ALD_PATH/passwd-" | awk -F':' '!a[$1]++' > "$ALD_PATH/$next_id/etc/passwd-" || fail_ex "$next_id" "Couldn't place system config."
    sort /etc/shadow- "$ALD_PATH/shadow-" | awk -F':' '!a[$1]++' > "$ALD_PATH/$next_id/etc/shadow-" || fail_ex "$next_id" "Couldn't place system config."
    rm "$ALD_PATH"/{passwd,shadow,passwd-,shadow-} || fail_ex "$next_id" "Couldn't place system config."

    podman rm ald-tmp &>/dev/null || fail_ex "$next_id" "Couldn't remove temporary container."

    pprint "Preparing boot entry..."
    new_kernel="$(find "$ALD_PATH/$next_id/usr/lib/modules" -name vmlinuz | sort | tail -n1)" || fail_ex "$next_id" "Couldn't place new kernel."
    new_init="$(find "$ALD_PATH/$next_id/usr/lib/modules" -name initramfs.img | sort | tail -n1)" || fail_ex "$next_id" "Couldn't place new initramfs."
    cp -rfa "$new_kernel" "$BOOT_PATH/$next_id" || fail_ex "$next_id" "Couldn't place new kernel."
    cp -rfa "$new_init" "$BOOT_PATH/$next_id" || fail_ex "$next_id" "Couldn't place new initramfs."
    cp -rfa "$ALD_PATH$BOOT_PATH.conf" "$BOOT_PATH/loader/entries/$next_id.conf" || fail_ex "$next_id" "Couldn't place boot config."
    cp -rfa "$ALD_PATH/init/init.sh" "$ALD_PATH/init/$next_id.sh" || fail_ex "$next_id" "Couldn't place init script."
    chmod +x "$ALD_PATH/init/$next_id.sh" || fail_ex "$next_id" "Couldn't place init script."

    sed -i "s@INSERT_DEPLOYMENT@$next_id@g" "$ALD_PATH/init/$next_id.sh" || fail_ex "$next_id" "Placing template files for $ID failed."
    sed -i "s@ALD_PATH@$ALD_PATH@g" "$ALD_PATH/init/$next_id.sh" || fail_ex "$next_id" "Placing template files for $ID failed."
    sed -i "s@INSERT_DEPLOYMENT@$next_id@g" "$BOOT_PATH/loader/entries/$next_id.conf" || fail_ex "$next_id" "Placing template files for $ID failed."
    sed -i "s@ALD_PATH@$ALD_PATH@g" "$BOOT_PATH/loader/entries/$next_id.conf" || fail_ex "$next_id" "Placing template files for $ID failed."

    pprint "Deployment $next_id installed!"

    if [[ "$@" == "-"*"s"* ]]; then swap_deployment "$next_id"; fi
}

swap_deployment() {
    pprint "Replacing deployment $(cat "$ALD_PATH/current") with $1"
    umount -l /usr || fail_ex "-1" "Couldn't temporarily remove /usr bind mount."
    exch /usr "$ALD_PATH/$1/usr" || fail_ex "-1" "Couldn't atomically switch deployments."  
    exch /etc "$ALD_PATH/$1/etc" || printf "Couldn't atomically switch system config, system might be instable."
    mount -o bind,ro /usr /usr || printf "Restoring /usr bind mount failed, fs is rw."
    mv "$ALD_PATH/$1" "$ALD_PATH/$(cat $ALD_PATH/current)" || printf "Renaming old deployment failed, naming out of sync."
    echo "$1" > "$ALD_PATH/current" || printf "Saving new deployment failed, naming out of sync."
    systemctl daemon-reexec || printf "Couldn't reexec systemd, system might behave weird."
    for user in "$(users | awk '{ print $1 }')"; do
        sudo -u "$user" env DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/"$(id -u $user)"/bus systemctl --user daemon-reexec || printf "Couldn't reexec systemd, system might behave weird."
    done
}

rm_dep() {
    pprint "Removing deployment $1..."
    podman rm ald-tmp &>/dev/null
    rm -rf "$ALD_PATH/$1" || printf "Removing $ALD_PATH/$1 failed, manual intervention might be necessary.\n"
    rm -rf "$ALD_PATH/init/$1.sh" || printf "Removing $ALD_PATH/init/$1.sh failed, manual intervention might be necessary.\n"
    rm -rf "$BOOT_PATH/$1" || printf "Removing $BOOT_PATH/$1 failed, manual intervention might be necessary.\n"
    rm -rf "$BOOT_PATH/loader/entries/$1.conf" || printf "Removing $BOOT_PATH/loader/entries/$1.conf failed, manual intervention might be necessary.\n"
    if ! mountpoint /usr &>/dev/null; then mount -o bind,ro /usr /usr; fi
}

init_ald() {
    shift

    mkdir -p "$ALD_PATH"/{0,init/safe}
    echo "0" > "$ALD_PATH/current"
    mv "$ALD_PATH"/init.sh "$ALD_PATH/init/"
    mv "$ALD_PATH"/{busybox,jexch} "$ALD_PATH/init/safe/"

    if [[ "$@" == "-"*"u"* ]]; then pull_image; fi
    if [[ "$@" == "-"*"b"* ]]; then build_image && SOURCE_IMAGE="$LOCAL_TAG"; fi
    setup_dep

    pprint "ALD initialised. Rebooting once is needed after initializing/switching image."
}

printf "\n"
if (infocmp 2>/dev/null | grep -q smcup) &&
    (infocmp 2>/dev/null | grep -q rmcup);
then tput_support="y";
else tput_support="n"; fi

if [[ "$(id -u)" != "0" ]]; then
    case $1 in
        help)
            print_help
            ;;
        *)
            printf "This program needs to be ran as root.\nMore info:\n"
            print_help
            ;;
    esac
else
    case $1 in
        build)
            build_image
            ;;
        pull)
            pull_image
            ;;
        swap)
            swap_deployment "$2"
            ;;
        dep)
            setup_dep "$@"
            ;;
	rm)
	    rm_dep "$2"
	    ;;
        init)
            init_ald "$@"
            ;;
        *)
            print_help
            ;;
    esac
fi
