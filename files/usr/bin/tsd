#!/usr/bin/env bash

pprint() {
    printf "\e[1F\e[2K%s\r\e[1E" "$1"
}

print_help() {
    printf "\033[1m\033[4mtsd\033[24m\tPrimitive bootc wrapper to enable automic management of more deployments\033[0m\n\n"
    printf "\033[1mUsage:\033[0m\ttsd SUBCOMMAND\n\n"
    printf "\033[1mSubcommands:\033[0m\n"
    printf "\thelp\t\tPrint this menu\n"
    printf "\tpull\t\tPull %s with podman\n" "$source_image"
    printf "\tbuild\t\tBuild %s from local containerfile %s\n" "$local_tag" "$containerfile"
    printf "\tupgrade\t\tRun \`bootc upgrade\` and keep %s deployments\n" "$keep_deps"
    printf "\t\tOptions:\n"
    printf "\t\t-l\t\tUse image built from %s\n" "$containerfile"
    printf "\t\t-r\t\tUse remote image %s\n" "$source_image"
}

fail_ex() {
    printf "beeb boop\n%s\nPanicking...\n" "$1"
    exit 1
}

pull_image() {
    printf "Checking for updates...\n"
    installed_image="$(podman inspect --format '{{.Digest}}' "$source_image" 2>/dev/null)"
    remote_image="$(skopeo inspect --format '{{.Digest}}' "docker://$source_image" 2>/dev/null)"
    if [[ "$installed_image" != "$remote_image" ]]; then
        printf "Pulling %s...\n" "$source_image"
        podman pull "$source_image" || fail_ex "Pulling remote image failed."
    else
        printf "Latest image already pulled.\n"
        exit 0
    fi
}

build_image() {
    printf "Building local image...\n"
    podman build --build-arg=SOURCE_IMAGE="$source_image" -t "$local_tag" "/etc/timesink" ||
        fail_ex "Couldn't build local image."
}

use_local() {
    pull_image
    build_image
    if [[ "$(bootc status --format json | jq .status.booted.image.image.image | cut -d'"' -f2)" != "$local_tag" ]]; then
        bootc switch --transport containers-storage "$local_tag" || fail_ex "Switching to local image failed."
    fi
}

use_remote() {
    if [[ "$(bootc status --format json | jq .status.booted.image.image.image | cut -d'"' -f2)" != "$source_image" ]]; then
        bootc switch --enforce-container-sigpolicy "$source_image" || fail_ex "Switching to remote image failed."
    fi
}

update_system() {
    printf "Initiating system upgrade...\n"
    ostree admin pin 0 &>/dev/null || printf "Couldn't pin current deployment. Possibly because it is pinned already.\n"
    if [[ "$*" == "-"*"l"* ]]; then use_local;
    elif [[ "$*" == "-"*"r"* ]]; then use_remote; fi
    bootc upgrade || fail_ex "\`bootc upgrade\` failed."
    (ostree admin pin -u "$keep_deps" &>/dev/null && printf "Released deployment %s.\n" "$keep_deps") ||
        printf "Unable to release deployment %s. Nonexistent?\n" "$keep_deps"
}

source "/etc/timesink/tsd.conf" &>/dev/null ||
    pprint "No config file found at /etc/timesink/tsd.conf. Using defaults."

source_image="${source_image:-ghcr.io/nostale3210/timesinkc-main:latest}"
local_tag="${local_tag:-localhost/tsd-local}"
containerfile="${containerfile:-/etc/timesink/Containerfile}"
keep_deps="${keep_deps:-3}"

declare -A -r RUN_CMD=(
["upgrade"]="tQrZGIIjpg49l"
["up"]="tQrZGIIjpg49l"
["pull"]="VLi0RdwuA5VwH"
["build"]="l6tl2tEOK66Ja"
)

if [[ "$(id -u)" != "0" ]]; then
    case "$1" in
        help)
            print_help
            ;;
        *)
            printf "\033[31;1mThis program needs elevated privileges to run!\033[0m\n\n"
            print_help
            exit 1
            ;;
    esac
elif [[ "$(id -u)" == "0" && "${!RUN_CMD[*]}" != *"$1"* ]]; then
    case "$1" in
        tQrZGIIjpg49l)
            update_system "${2-}"
            ;;
        VLi0RdwuA5VwH)
            pull_image
            ;;
        l6tl2tEOK66Ja)
            build_image
            ;;
        *)
            printf "\033[31;1mNo known command: %s.\033[0m\n\n" "$1"
            print_help
            exit 1
            ;;
    esac
fi

if [[ "${!RUN_CMD[*]}" != *"$1"* ]]; then exit 0; fi

(systemd-inhibit --list | grep -q tsd) && fail_ex "\033[31;1m\`bootc\` seems to be running already.\033[0m"

for possible_cmd in "${!RUN_CMD[@]}"; do
    if [[ "$1" == "$possible_cmd" ]]; then
        shift
        set -e
        systemd-inhibit --what="idle:sleep:shutdown" --who="tsd" --why="Running system updates." \
            tsd "${RUN_CMD[$possible_cmd]}" "$@"
        exit 0
    fi
done
